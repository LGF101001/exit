[AllowAnonymous]
[HttpPost]
public Tuple<string, string, string> EncryptText(RSAHander hander)
{
    string encryptDES_Text = VVSecurityHelper.EncryptDES(hander.EncryptKey, hander.Content);
    string encryptRSA_Key = VVSecurityHelper.EncryptRSA(hander.RsaKey, hander.EncryptKey);

    return Tuple.Create("DES密钥： " + hander.EncryptKey, "DES密钥RSA加密： " + encryptRSA_Key, "DES加密后文本： " + encryptDES_Text);
}

[AllowAnonymous]
[HttpPost]
public Tuple<string, string> DecryptText(RSAHander hander)
{
    string decryptRSA_Key = VVSecurityHelper.DecryptRSA(hander.RsaKey, hander.EncryptKey);
    string decryptDES_Text = VVSecurityHelper.DecryptDES(decryptRSA_Key, hander.Content);

    return Tuple.Create("DES密钥RSA解密： " + decryptRSA_Key, "DES解密后文本： " + decryptDES_Text);
}
		
public class RSAHander
{
    public string Content { get; set; }
    public string RsaKey { get; set; }
    public string EncryptKey { get; set; }
}

using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace CommonUtility
{
    /// <summary>
    ///安全加密处理
    /// </summary>
    public class SecurityHelper
    {
        /// <summary>
        /// Base64编码
        /// </summary>
        /// <param name="message"></param>
        /// <param name="codepage">代码页</param>
        /// * 代码页 名称 
        /// * 1200 "UTF-16LE"、"utf-16"、"ucs-2"、"unicode"或"ISO-10646-UCS-2" 
        /// * 1201 "UTF-16BE"或"unicodeFFFE" 
        /// * 1252 "windows-1252" 
        /// * 65000 "utf-7"、"csUnicode11UTF7"、"unicode-1-1-utf-7"、"unicode-2-0-utf-7"、"x-unicode-1-1-utf-7"或"x-unicode-2-0-utf-7" 
        /// * 65001 "utf-8"、"unicode-1-1-utf-8"、"unicode-2-0-utf-8"、"x-unicode-1-1-utf-8"或"x-unicode-2-0-utf-8" 
        /// * 20127 "us-ascii"、"us"、"ascii"、"ANSI_X3.4-1968"、"ANSI_X3.4-1986"、"cp367"、"csASCII"、"IBM367"、"iso-ir-6"、"ISO646-US"或"ISO_646.irv:1991" 
        /// * 54936 "GB18030" 
        /// <returns></returns>
        public static string Base64Encode(string message, int codepage = 65001)
        {
            string encode = "";
            byte[] bytes = Encoding.GetEncoding(codepage).GetBytes(message);
            try
            {
                encode = Convert.ToBase64String(bytes);
            }
            catch
            {
                encode = message;
            }
            return encode;
        }

        /// <summary>
        /// Base64解码
        /// </summary>
        /// <param name="message"></param>
        /// <param name="codepage">代码页</param>
        /// * 代码页 名称 
        /// * 1200 "UTF-16LE"、"utf-16"、"ucs-2"、"unicode"或"ISO-10646-UCS-2" 
        /// * 1201 "UTF-16BE"或"unicodeFFFE" 
        /// * 1252 "windows-1252" 
        /// * 65000 "utf-7"、"csUnicode11UTF7"、"unicode-1-1-utf-7"、"unicode-2-0-utf-7"、"x-unicode-1-1-utf-7"或"x-unicode-2-0-utf-7" 
        /// * 65001 "utf-8"、"unicode-1-1-utf-8"、"unicode-2-0-utf-8"、"x-unicode-1-1-utf-8"或"x-unicode-2-0-utf-8" 
        /// * 20127 "us-ascii"、"us"、"ascii"、"ANSI_X3.4-1968"、"ANSI_X3.4-1986"、"cp367"、"csASCII"、"IBM367"、"iso-ir-6"、"ISO646-US"或"ISO_646.irv:1991" 
        /// * 54936 "GB18030" 
        /// <returns></returns>
        public static string Base64Decode(string message, int codepage = 65001)
        {
            string decode = "";
            byte[] bytes = Convert.FromBase64String(message);
            try
            {
                decode = Encoding.GetEncoding(codepage).GetString(bytes);
            }
            catch
            {
                decode = message;
            }
            return decode;
        }

        /// <summary>
        /// 生成密钥
        /// </summary>
        public static RSAKey GenerateRSAKey()
        {
            using (var rsa = new RSACryptoServiceProvider())
            {
                var key = new RSAKey
                {
                    PrivateKey = rsa.ToXmlString(true),
                    PublicKey = rsa.ToXmlString(false)
                };

                return key;
            }
        }

        /// <summary>
        /// RSA加密
        /// </summary>
        /// <param name="publickey">公钥</param>
        /// <param name="content">待加密的字符串</param>
        /// <returns></returns>
        public static string EncryptRSA(string publickey, string content)
        {
            RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
            byte[] cipherbytes;
            rsa.FromXmlString(publickey);
            cipherbytes = rsa.Encrypt(Encoding.UTF8.GetBytes(content), false);

            return Convert.ToBase64String(cipherbytes);
        }

        /// <summary>
        /// RSA解密
        /// </summary>
        /// <param name="privatekey">私钥</param>
        /// <param name="content">待解密的字符串</param>
        /// <returns></returns>
        public static string DecryptRSA(string privatekey, string content)
        {
            RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
            byte[] cipherbytes;
            rsa.FromXmlString(privatekey);
            cipherbytes = rsa.Decrypt(Convert.FromBase64String(content), false);

            return Encoding.UTF8.GetString(cipherbytes);
        }

        //默认密钥向量
        private static byte[] Keys = { 0xEF, 0xAB, 0x56, 0x78, 0x90, 0x34, 0xCD, 0x12 };
        /// <summary>
        /// DES加密字符串
        /// </summary>
        /// <param name="encryptKey">加密密钥,要求为8位</param>
        /// <param name="encryptString">待加密的字符串</param>
        /// <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        public static string EncryptDES(string encryptKey, string encryptString)
        {
            try
            {
                byte[] rgbKey = Encoding.UTF8.GetBytes(encryptKey.Substring(0, 8));
                byte[] rgbIV = Keys;
                byte[] inputByteArray = Encoding.UTF8.GetBytes(encryptString);
                DESCryptoServiceProvider dCSP = new DESCryptoServiceProvider();
                MemoryStream mStream = new MemoryStream();
                CryptoStream cStream = new CryptoStream(mStream, dCSP.CreateEncryptor(rgbKey, rgbIV), CryptoStreamMode.Write);
                cStream.Write(inputByteArray, 0, inputByteArray.Length);
                cStream.FlushFinalBlock();
                return Convert.ToBase64String(mStream.ToArray());
            }
            catch
            {
                return encryptString;
            }
        }

        /// <summary>
        /// DES解密字符串
        /// </summary>
        /// <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
        /// <param name="decryptString">待解密的字符串</param>
        /// <returns>解密成功返回解密后的字符串，失败返源串</returns>
        public static string DecryptDES(string decryptKey, string decryptString)
        {
            try
            {
                byte[] rgbKey = Encoding.UTF8.GetBytes(decryptKey.Substring(0, 8));
                byte[] rgbIV = Keys;
                byte[] inputByteArray = Convert.FromBase64String(decryptString);
                DESCryptoServiceProvider DCSP = new DESCryptoServiceProvider();
                MemoryStream mStream = new MemoryStream();
                CryptoStream cStream = new CryptoStream(mStream, DCSP.CreateDecryptor(rgbKey, rgbIV), CryptoStreamMode.Write);
                cStream.Write(inputByteArray, 0, inputByteArray.Length);
                cStream.FlushFinalBlock();
                return Encoding.UTF8.GetString(mStream.ToArray());
            }
            catch
            {
                return decryptString;
            }
        }
    }

    /// <summary>
    /// RSA加密的密匙结构  公钥和私匙
    /// </summary>
    public struct RSAKey
    {
        public string PublicKey { get; set; }
        public string PrivateKey { get; set; }
    }
}

publickey = @"<RSAKeyValue><Modulus>5m9m14XH3oqLJ8bNGw9e4rGpXpcktv9MSkHSVFVMjHbfv+SJ5v0ubqQxa5YjLN4vc49z7SVju8s0X4gZ6AzZTn06jzWOgyPRV54Q4I0DCYadWW4Ze3e+BOtwgVU1Og3qHKn8vygoj40J6U85Z/PTJu3hN1m75Zr195ju7g9v4Hk=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>";
privatekey = @"<RSAKeyValue><Modulus>5m9m14XH3oqLJ8bNGw9e4rGpXpcktv9MSkHSVFVMjHbfv+SJ5v0ubqQxa5YjLN4vc49z7SVju8s0X4gZ6AzZTn06jzWOgyPRV54Q4I0DCYadWW4Ze3e+BOtwgVU1Og3qHKn8vygoj40J6U85Z/PTJu3hN1m75Zr195ju7g9v4Hk=</Modulus><Exponent>AQAB</Exponent><P>/hf2dnK7rNfl3lbqghWcpFdu778hUpIEBixCDL5WiBtpkZdpSw90aERmHJYaW2RGvGRi6zSftLh00KHsPcNUMw==</P><Q>6Cn/jOLrPapDTEp1Fkq+uz++1Do0eeX7HYqi9rY29CqShzCeI7LEYOoSwYuAJ3xA/DuCdQENPSoJ9KFbO4Wsow==</Q><DP>ga1rHIJro8e/yhxjrKYo/nqc5ICQGhrpMNlPkD9n3CjZVPOISkWF7FzUHEzDANeJfkZhcZa21z24aG3rKo5Qnw==</DP><DQ>MNGsCB8rYlMsRZ2ek2pyQwO7h/sZT8y5ilO9wu08Dwnot/7UMiOEQfDWstY3w5XQQHnvC9WFyCfP4h4QBissyw==</DQ><InverseQ>EG02S7SADhH1EVT9DD0Z62Y0uY7gIYvxX/uq+IzKSCwB8M2G7Qv9xgZQaQlLpCaeKbux3Y59hHM+KpamGL19Kg==</InverseQ><D>vmaYHEbPAgOJvaEXQl+t8DQKFT1fudEysTy31LTyXjGu6XiltXXHUuZaa2IPyHgBz0Nd7znwsW/S44iql0Fen1kzKioEL3svANui63O3o5xdDeExVM6zOf1wUUh/oldovPweChyoAdMtUzgvCbJk1sYDJf++Nr0FeNW1RB1XG30=</D></RSAKeyValue>";
  
  
{
  "PublicKey": "<RSAKeyValue><Modulus>15SwwL5YnqpYViaqf59jCRfLPJ4lwsQfUhnZMoSsudIziLGiUOvIx8jp+T58LJTbaxq1LrWatxtL0xgfyvNy8rkEWaEY3vb/X/XrC0gGy7r9ISNC1awZYvaXKVC30NLBBBuH8w+ioOf46lwWZcaU4XKjnjfagpS3PKnlnuXS/LU=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>",
  "PrivateKey": "<RSAKeyValue><Modulus>15SwwL5YnqpYViaqf59jCRfLPJ4lwsQfUhnZMoSsudIziLGiUOvIx8jp+T58LJTbaxq1LrWatxtL0xgfyvNy8rkEWaEY3vb/X/XrC0gGy7r9ISNC1awZYvaXKVC30NLBBBuH8w+ioOf46lwWZcaU4XKjnjfagpS3PKnlnuXS/LU=</Modulus><Exponent>AQAB</Exponent><P>7G6fQ9gg8FilYaqwvA/1AOLgqlpz9xWf7DrPPr1W6DTgEAG5JPVj0zEW6/5cUbmyEHZS6gy71q5V5wj6z1Bk6w==</P><Q>6WxIrxMOZcLBsKMCvMsom07cq2cVi/++2Kv4r28Z7MQUNcKWfzuoGpWiDV+JgGD7EVNhEtibfg0skTE/rGw83w==</Q><DP>2aTHlaOaRsXDkBGZ2bTyu5seZ5MWl0hfzA0jBEU1gFJUREfh0ETYXOwehqXDBDRl10Ok9fE85NXdG+2nPDpsew==</DP><DQ>Q59VJzMUFrLnPe7bmioY53VfRGCmw1ohxc98SgabshXT7QckZlO4DYuP2OP2h7SQx6IqGzWZRlk2shFcau0obQ==</DQ><InverseQ>fTOdK3T+EYzt0lbkuvn8n6b+HY1bQYuQ8p0DScKBROLO+T62AfatHfSKqMZ1I7nYb659qjUXVpPPKl0+4FnCzg==</InverseQ><D>oiTHvHBuHwhoYIO8gTjUOCaZSgJ4zEDOfeXLIt//OdQLxqg0OUDeRsWqlTiWFMHxNmFkHLmioE37fc4LO45XyS5SIZqr6gjM7onj8gN0CwZGW85ZjXrb9nuY+eYwhgZOzvosp2FMkIyN6+8gbbznnSmifTXS6LC7GJP7IQ9ZuRE=</D></RSAKeyValue>"
}